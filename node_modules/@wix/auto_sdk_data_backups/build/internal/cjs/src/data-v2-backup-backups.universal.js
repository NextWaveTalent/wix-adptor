"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteBackup = exports.listRestorations = exports.restorePartialBackup = exports.restoreBackup = exports.listBackups = exports.createBackup = exports.WebhookIdentityType = exports.RestorationStatus = exports.Type = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixDataV2Backup = __importStar(require("./data-v2-backup-backups.http.js"));
var Status;
(function (Status) {
    /** Backup creation is in progress. */
    Status["PENDING"] = "PENDING";
    /** Backup has been created successfully and can be used for data restoration. */
    Status["READY"] = "READY";
    /** Backup creation has failed. */
    Status["FAILED"] = "FAILED";
    /** Backup has been deleted. */
    Status["DELETED"] = "DELETED";
    /** Backup has been canceled. */
    Status["CANCELED"] = "CANCELED";
})(Status || (exports.Status = Status = {}));
var Type;
(function (Type) {
    /** Backup taken on demand. */
    Type["ON_DEMAND"] = "ON_DEMAND";
    /** Backup taken automatically by the system on a regular schedule. */
    Type["AUTO"] = "AUTO";
})(Type || (exports.Type = Type = {}));
var RestorationStatus;
(function (RestorationStatus) {
    /** Restoration from a backup is in progress. */
    RestorationStatus["PENDING"] = "PENDING";
    /** Restoration from a backup has been successful. */
    RestorationStatus["COMPLETED"] = "COMPLETED";
    /** Restoration from a backup has failed. */
    RestorationStatus["FAILED"] = "FAILED";
})(RestorationStatus || (exports.RestorationStatus = RestorationStatus = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates an on-demand backup of live content in a site's collections.
 *
 *
 * By default, all of the site's collections are included in the backup. For a partial backup, specify which collections to include in the `backup.collections` parameter.
 *
 * The process of creating a backup takes time.
 * You can check whether a backup has completed successfully with List Backups.
 *
 * You can store up to 3 on-demand backups for each site.
 * If 3 on-demand backups already exist, the oldest existing on-demand backup for the site is deleted when a new one is created. Automated backups are not affected.
 * @public
 * @permissionId WIX_DATA.CREATE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.CreateBackup
 */
async function createBackup() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixDataV2Backup.createBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createBackup = createBackup;
/**
 * Retrieves a list of all backups for a site.
 *
 * Results are sorted by requested date, with the newest first.
 *
 * You can use this method to check whether a backup initiated with Create Backup has been completed successfully.
 * @public
 * @permissionId WIX_DATA.LIST_BACKUPS
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.ListBackups
 */
async function listBackups(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        status: options?.status,
        type: options?.type,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV2Backup.listBackups(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                status: '$[0].status',
                type: '$[0].type',
                paging: '$[0].paging',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listBackups = listBackups;
/**
 * Restores all data from a backup.
 *
 * The process of restoring data from a backup takes time.
 * You can check whether your restoration has completed successfully with List Restorations.
 * @param backupId - ID of backup to be restored.
 * @public
 * @requiredField backupId
 * @permissionId WIX_DATA.RESTORE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.RestoreBackup
 */
async function restoreBackup(backupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ backupId: backupId });
    const reqOpts = ambassadorWixDataV2Backup.restoreBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { backupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['backupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.restoreBackup = restoreBackup;
/**
 * Restores specific collections from a backup.
 *
 * The process of restoring data from a backup takes time.
 * You can check whether your restoration has completed successfully with List Restorations.
 * @param backupId - ID of backup to be restored.
 * @param restorationCollections - **Required.** Collections to be restored.
 *
 * Note: If collections have a multi-reference relationship,
 * the preexisting references will be restored if at least one of those collections are restored.
 * @public
 * @requiredField backupId
 * @requiredField restorationCollections
 * @permissionId WIX_DATA.RESTORE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.RestorePartialBackup
 */
async function restorePartialBackup(backupId, restorationCollections) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        backupId: backupId,
        restorationCollections: restorationCollections,
    });
    const reqOpts = ambassadorWixDataV2Backup.restorePartialBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                backupId: '$[0]',
                restorationCollections: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['backupId', 'restorationCollections']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.restorePartialBackup = restorePartialBackup;
/**
 * Retrieves a list of all data restorations from backups.
 *
 * Results are sorted by requested date, with the newest first.
 *
 * You can use this method to check whether a restoration initiated with Restore Backup has been completed successfully.
 * @public
 * @permissionId WIX_DATA.LIST_RESTORATIONS
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.ListRestorations
 */
async function listRestorations(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        status: options?.status,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV2Backup.listRestorations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                status: '$[0].status',
                paging: '$[0].paging',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listRestorations = listRestorations;
/**
 * Deletes a backup.
 *
 * The process of deleting a backup takes time.
 * You can check whether a backup has been deleted successfully with List Backups.
 * @param backupId - ID of the backup to be deleted.
 * @public
 * @requiredField backupId
 * @permissionId WIX_DATA.DELETE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.DeleteBackup
 */
async function deleteBackup(backupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ backupId: backupId });
    const reqOpts = ambassadorWixDataV2Backup.deleteBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { backupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['backupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteBackup = deleteBackup;
//# sourceMappingURL=data-v2-backup-backups.universal.js.map