import { HttpClient } from '@wix/sdk-types';
import { CreateBackupResponse, ListBackupsOptions, ListBackupsResponse, ListRestorationsOptions, ListRestorationsResponse, RestorationCollection, RestoreBackupResponse, RestorePartialBackupResponse } from './data-v2-backup-backups.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createBackup(httpClient: HttpClient): CreateBackupSignature;
interface CreateBackupSignature {
    /**
     * Creates an on-demand backup of live content in a site's collections.
     *
     *
     * By default, all of the site's collections are included in the backup. For a partial backup, specify which collections to include in the `backup.collections` parameter.
     *
     * The process of creating a backup takes time.
     * You can check whether a backup has completed successfully with List Backups.
     *
     * You can store up to 3 on-demand backups for each site.
     * If 3 on-demand backups already exist, the oldest existing on-demand backup for the site is deleted when a new one is created. Automated backups are not affected.
     */
    (): Promise<CreateBackupResponse>;
}
export declare function listBackups(httpClient: HttpClient): ListBackupsSignature;
interface ListBackupsSignature {
    /**
     * Retrieves a list of all backups for a site.
     *
     * Results are sorted by requested date, with the newest first.
     *
     * You can use this method to check whether a backup initiated with Create Backup has been completed successfully.
     */
    (options?: ListBackupsOptions | undefined): Promise<ListBackupsResponse>;
}
export declare function restoreBackup(httpClient: HttpClient): RestoreBackupSignature;
interface RestoreBackupSignature {
    /**
     * Restores all data from a backup.
     *
     * The process of restoring data from a backup takes time.
     * You can check whether your restoration has completed successfully with List Restorations.
     * @param - ID of backup to be restored.
     */
    (backupId: string): Promise<RestoreBackupResponse>;
}
export declare function restorePartialBackup(httpClient: HttpClient): RestorePartialBackupSignature;
interface RestorePartialBackupSignature {
    /**
     * Restores specific collections from a backup.
     *
     * The process of restoring data from a backup takes time.
     * You can check whether your restoration has completed successfully with List Restorations.
     * @param - ID of backup to be restored.
     * @param - **Required.** Collections to be restored.
     *
     * Note: If collections have a multi-reference relationship,
     * the preexisting references will be restored if at least one of those collections are restored.
     */
    (backupId: string, restorationCollections: RestorationCollection[]): Promise<RestorePartialBackupResponse>;
}
export declare function listRestorations(httpClient: HttpClient): ListRestorationsSignature;
interface ListRestorationsSignature {
    /**
     * Retrieves a list of all data restorations from backups.
     *
     * Results are sorted by requested date, with the newest first.
     *
     * You can use this method to check whether a restoration initiated with Restore Backup has been completed successfully.
     */
    (options?: ListRestorationsOptions | undefined): Promise<ListRestorationsResponse>;
}
export declare function deleteBackup(httpClient: HttpClient): DeleteBackupSignature;
interface DeleteBackupSignature {
    /**
     * Deletes a backup.
     *
     * The process of deleting a backup takes time.
     * You can check whether a backup has been deleted successfully with List Backups.
     * @param - ID of the backup to be deleted.
     */
    (backupId: string): Promise<void>;
}
export { ActionEvent, Backup, BackupStateChanged, CancelBackupRequest, CancelBackupResponse, Collection, CreateBackupRequest, CreateBackupResponse, DeleteAllRequest, DeleteBackupRequest, DeleteBackupResponse, DisableInstanceRequest, DomainEvent, DomainEventBodyOneOf, Empty, EnableInstanceRequest, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, FailRestorationRequest, GetBackupMetadataRequest, GetBackupMetadataResponse, IdentificationData, IdentificationDataIdOneOf, ListBackupsOptions, ListBackupsRequest, ListBackupsResponse, ListRestorationsOptions, ListRestorationsRequest, ListRestorationsResponse, MessageEnvelope, MigrateNamespaceRequest, MigrateNamespaceResponse, MoveRequest, Paging, PagingMetadataV2, RebuildRequest, RemoveDeletedRequest, Restoration, RestorationCollection, RestorationStateChanged, RestorationStatus, RestoreBackupRequest, RestoreBackupResponse, RestoreDestination, RestoreInfo, RestorePartialBackupRequest, RestorePartialBackupResponse, Status, TakeBackupRequest, Type, UpdateBackupMetadataRequest, WebhookIdentityType, } from './data-v2-backup-backups.universal.js';
