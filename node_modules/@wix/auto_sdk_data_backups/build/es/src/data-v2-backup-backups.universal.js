import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixDataV2Backup from './data-v2-backup-backups.http.js';
export var Status;
(function (Status) {
    /** Backup creation is in progress. */
    Status["PENDING"] = "PENDING";
    /** Backup has been created successfully and can be used for data restoration. */
    Status["READY"] = "READY";
    /** Backup creation has failed. */
    Status["FAILED"] = "FAILED";
    /** Backup has been deleted. */
    Status["DELETED"] = "DELETED";
    /** Backup has been canceled. */
    Status["CANCELED"] = "CANCELED";
})(Status || (Status = {}));
export var Type;
(function (Type) {
    /** Backup taken on demand. */
    Type["ON_DEMAND"] = "ON_DEMAND";
    /** Backup taken automatically by the system on a regular schedule. */
    Type["AUTO"] = "AUTO";
})(Type || (Type = {}));
export var RestorationStatus;
(function (RestorationStatus) {
    /** Restoration from a backup is in progress. */
    RestorationStatus["PENDING"] = "PENDING";
    /** Restoration from a backup has been successful. */
    RestorationStatus["COMPLETED"] = "COMPLETED";
    /** Restoration from a backup has failed. */
    RestorationStatus["FAILED"] = "FAILED";
})(RestorationStatus || (RestorationStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates an on-demand backup of live content in a site's collections.
 *
 *
 * By default, all of the site's collections are included in the backup. For a partial backup, specify which collections to include in the `backup.collections` parameter.
 *
 * The process of creating a backup takes time.
 * You can check whether a backup has completed successfully with List Backups.
 *
 * You can store up to 3 on-demand backups for each site.
 * If 3 on-demand backups already exist, the oldest existing on-demand backup for the site is deleted when a new one is created. Automated backups are not affected.
 * @public
 * @permissionId WIX_DATA.CREATE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.CreateBackup
 */
export async function createBackup() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixDataV2Backup.createBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of all backups for a site.
 *
 * Results are sorted by requested date, with the newest first.
 *
 * You can use this method to check whether a backup initiated with Create Backup has been completed successfully.
 * @public
 * @permissionId WIX_DATA.LIST_BACKUPS
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.ListBackups
 */
export async function listBackups(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        status: options?.status,
        type: options?.type,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV2Backup.listBackups(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                status: '$[0].status',
                type: '$[0].type',
                paging: '$[0].paging',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Restores all data from a backup.
 *
 * The process of restoring data from a backup takes time.
 * You can check whether your restoration has completed successfully with List Restorations.
 * @param backupId - ID of backup to be restored.
 * @public
 * @requiredField backupId
 * @permissionId WIX_DATA.RESTORE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.RestoreBackup
 */
export async function restoreBackup(backupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ backupId: backupId });
    const reqOpts = ambassadorWixDataV2Backup.restoreBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { backupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['backupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Restores specific collections from a backup.
 *
 * The process of restoring data from a backup takes time.
 * You can check whether your restoration has completed successfully with List Restorations.
 * @param backupId - ID of backup to be restored.
 * @param restorationCollections - **Required.** Collections to be restored.
 *
 * Note: If collections have a multi-reference relationship,
 * the preexisting references will be restored if at least one of those collections are restored.
 * @public
 * @requiredField backupId
 * @requiredField restorationCollections
 * @permissionId WIX_DATA.RESTORE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.RestorePartialBackup
 */
export async function restorePartialBackup(backupId, restorationCollections) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        backupId: backupId,
        restorationCollections: restorationCollections,
    });
    const reqOpts = ambassadorWixDataV2Backup.restorePartialBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                backupId: '$[0]',
                restorationCollections: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['backupId', 'restorationCollections']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of all data restorations from backups.
 *
 * Results are sorted by requested date, with the newest first.
 *
 * You can use this method to check whether a restoration initiated with Restore Backup has been completed successfully.
 * @public
 * @permissionId WIX_DATA.LIST_RESTORATIONS
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.ListRestorations
 */
export async function listRestorations(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        status: options?.status,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV2Backup.listRestorations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                status: '$[0].status',
                paging: '$[0].paging',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a backup.
 *
 * The process of deleting a backup takes time.
 * You can check whether a backup has been deleted successfully with List Backups.
 * @param backupId - ID of the backup to be deleted.
 * @public
 * @requiredField backupId
 * @permissionId WIX_DATA.DELETE_BACKUP
 * @permissionScope Manage Data Backups
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-BACKUPS
 * @applicableIdentity APP
 * @fqn com.wixpress.dstore.api.backup.v2.BackupService.DeleteBackup
 */
export async function deleteBackup(backupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ backupId: backupId });
    const reqOpts = ambassadorWixDataV2Backup.deleteBackup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { backupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['backupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=data-v2-backup-backups.universal.js.map