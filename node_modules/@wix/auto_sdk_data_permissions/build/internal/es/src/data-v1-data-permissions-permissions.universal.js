import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixDataV1DataPermissions from './data-v1-data-permissions-permissions.http.js';
/**
 * Describes who can perform certain action.
 * Each level includes all levels below it (except UNDEFINED).
 */
export var AccessLevel;
(function (AccessLevel) {
    /** Not set */
    AccessLevel["UNKNOWN"] = "UNKNOWN";
    /** Any subject, including visitors */
    AccessLevel["ANYONE"] = "ANYONE";
    /** Any signed-in user (both site members and collaborators) */
    AccessLevel["SITE_MEMBER"] = "SITE_MEMBER";
    /** Any signed-in user, but site members only have access to own items */
    AccessLevel["SITE_MEMBER_AUTHOR"] = "SITE_MEMBER_AUTHOR";
    /** Site collaborator that has a role with CMS Access permission */
    AccessLevel["CMS_EDITOR"] = "CMS_EDITOR";
    /** CMS administrators and users or roles granted with special access */
    AccessLevel["PRIVILEGED"] = "PRIVILEGED";
})(AccessLevel || (AccessLevel = {}));
export var Access;
(function (Access) {
    /** Action is not specifically allowed, but can be allowed by top-level permissions */
    Access["UNSPECIFIED"] = "UNSPECIFIED";
    /** Action is specifically allowed */
    Access["ALLOWED"] = "ALLOWED";
})(Access || (Access = {}));
export var SubjectType;
(function (SubjectType) {
    SubjectType["UNKNOWN"] = "UNKNOWN";
    SubjectType["ACCOUNT"] = "ACCOUNT";
    SubjectType["USER"] = "USER";
    SubjectType["USER_GROUP"] = "USER_GROUP";
    SubjectType["MEMBER_GROUP"] = "MEMBER_GROUP";
    SubjectType["VISITOR_GROUP"] = "VISITOR_GROUP";
    SubjectType["EXTERNAL_APP"] = "EXTERNAL_APP";
    SubjectType["ACCOUNT_GROUP"] = "ACCOUNT_GROUP";
    SubjectType["WIX_APP"] = "WIX_APP";
})(SubjectType || (SubjectType = {}));
export var SubjectContextType;
(function (SubjectContextType) {
    SubjectContextType["UNKNOWN_CTX"] = "UNKNOWN_CTX";
    SubjectContextType["ORG_CTX"] = "ORG_CTX";
    SubjectContextType["ACCOUNT_CTX"] = "ACCOUNT_CTX";
})(SubjectContextType || (SubjectContextType = {}));
export var SimpleConditionOperator;
(function (SimpleConditionOperator) {
    SimpleConditionOperator["UNKNOWN_SIMPLE_OP"] = "UNKNOWN_SIMPLE_OP";
    SimpleConditionOperator["EQUAL"] = "EQUAL";
})(SimpleConditionOperator || (SimpleConditionOperator = {}));
export var JoinedConditionOperator;
(function (JoinedConditionOperator) {
    JoinedConditionOperator["UNKNOWN_JOIN_OP"] = "UNKNOWN_JOIN_OP";
    JoinedConditionOperator["OR"] = "OR";
    JoinedConditionOperator["AND"] = "AND";
})(JoinedConditionOperator || (JoinedConditionOperator = {}));
export var Effect;
(function (Effect) {
    Effect["UNKNOWN_EFFECT"] = "UNKNOWN_EFFECT";
    Effect["ALLOW"] = "ALLOW";
    Effect["DENY"] = "DENY";
})(Effect || (Effect = {}));
export var PolicyType;
(function (PolicyType) {
    PolicyType["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    PolicyType["PREDEFINED"] = "PREDEFINED";
    PolicyType["CUSTOM"] = "CUSTOM";
    PolicyType["INLINE_CUSTOM"] = "INLINE_CUSTOM";
})(PolicyType || (PolicyType = {}));
export var PolicyOwnerType;
(function (PolicyOwnerType) {
    PolicyOwnerType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    PolicyOwnerType["WIX"] = "WIX";
    PolicyOwnerType["WIX_ACCOUNT"] = "WIX_ACCOUNT";
})(PolicyOwnerType || (PolicyOwnerType = {}));
/**
 * Returns data permissions for a data collection
 * @param dataCollectionId - Data Collection ID to get permissions for
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @permissionId WIX_DATA.PERMISSIONS_READ
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.GetPermissions
 */
export async function getPermissions(dataCollectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        dataCollectionId: dataCollectionId,
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.getPermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { dataCollectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates data permissions for a data collection
 *
 * NOTE that special permissions are not updated using this API, use dedicated methods for it.
 * @param dataPermissions - Data permissions to update
 * @public
 * @documentationMaturity preview
 * @requiredField dataPermissions
 * @requiredField dataPermissions._id
 * @requiredField dataPermissions.itemInsert
 * @requiredField dataPermissions.itemRead
 * @requiredField dataPermissions.itemRemove
 * @requiredField dataPermissions.itemUpdate
 * @permissionId WIX_DATA.PERMISSIONS_UPDATE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.UpdatePermissions
 */
export async function updatePermissions(dataPermissions) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        dataPermissions: dataPermissions,
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.updatePermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { dataPermissions: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['dataPermissions']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds special data permissions for particular user/group
 * Errors:
 * - `ALREADY_EXISTS` in case if special permission for same subject already exists
 * @param dataCollectionId - Data Collection ID to add special permission for
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @requiredField options
 * @requiredField options.specialPermissions
 * @requiredField options.specialPermissions.subject
 * @permissionId WIX_DATA.PERMISSIONS_UPDATE_SPECIAL
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.AddSpecialPermissions
 */
export async function addSpecialPermissions(dataCollectionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        dataCollectionId: dataCollectionId,
        specialPermissions: options?.specialPermissions,
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.addSpecialPermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                dataCollectionId: '$[0]',
                specialPermissions: '$[1].specialPermissions',
            },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates special data permissions for particular user/group.
 * Any omitted permissions will be set to UNSPECIFIED.
 * @param _id - ID of this special access, so it can be managed separately
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField specialPermissions
 * @permissionId WIX_DATA.PERMISSIONS_UPDATE_SPECIAL
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.UpdateSpecialPermissions
 */
export async function updateSpecialPermissions(_id, specialPermissions) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        specialPermissions: { ...specialPermissions, id: _id },
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.updateSpecialPermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { specialPermissions: '$[1]' },
            explicitPathsToArguments: { 'specialPermissions.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'specialPermissions']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes special data permissions for particular user/group
 * @param specialPermissionsId - Special permissions ID to remove
 * @public
 * @documentationMaturity preview
 * @requiredField specialPermissionsId
 * @permissionId WIX_DATA.PERMISSIONS_UPDATE_SPECIAL
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.RemoveSpecialPermissions
 */
export async function removeSpecialPermissions(specialPermissionsId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        specialPermissionsId: specialPermissionsId,
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.removeSpecialPermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { specialPermissionsId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['specialPermissionsId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Returns current user permissions for given data collection
 * @param dataCollectionId - Data Collection ID to get permission for
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @permissionId WIX_DATA.PERMISSIONS_GET_ALLOWED
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @permissionScope Manage Data Collections
 * @permissionScopeId SCOPE.DC-DATA.DATA-COLLECTIONS-MANAGE
 * @applicableIdentity APP
 * @fqn wix.cloud.permissions.v1.DataPermissionsService.GetMyPermissions
 */
export async function getMyPermissions(dataCollectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        dataCollectionId: dataCollectionId,
    });
    const reqOpts = ambassadorWixDataV1DataPermissions.getMyPermissions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { dataCollectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=data-v1-data-permissions-permissions.universal.js.map