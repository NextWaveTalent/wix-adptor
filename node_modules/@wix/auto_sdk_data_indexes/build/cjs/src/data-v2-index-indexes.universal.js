"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listAvailableIndexes = exports.listIndexes = exports.dropIndex = exports.createIndex = exports.Environment = exports.IndexSource = exports.Status = exports.Order = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixDataV2Index = __importStar(require("./data-v2-index-indexes.http.js"));
/**
 * Order determines how values are ordered in the index. This is important when
 * ordering and/or range querying by indexed fields.
 */
var Order;
(function (Order) {
    Order["ASC"] = "ASC";
    Order["DESC"] = "DESC";
})(Order || (exports.Order = Order = {}));
var Status;
(function (Status) {
    /** Place holder. Never returned by the service. */
    Status["UNKNOWN"] = "UNKNOWN";
    /** Index creation is in progress. */
    Status["BUILDING"] = "BUILDING";
    /** Index has been successfully created and can be used in queries. */
    Status["ACTIVE"] = "ACTIVE";
    /** Index is in the process of being dropped. */
    Status["DROPPING"] = "DROPPING";
    /** Index has been dropped successfully. */
    Status["DROPPED"] = "DROPPED";
    /** Index creation has failed. */
    Status["FAILED"] = "FAILED";
    /** Index contains incorrectly indexed data. */
    Status["INVALID"] = "INVALID";
})(Status || (exports.Status = Status = {}));
var IndexSource;
(function (IndexSource) {
    /** Place holder. Never returned by the service. */
    IndexSource["UNKNOWN_INDEX_SOURCE"] = "UNKNOWN_INDEX_SOURCE";
    /** Index is created by the system, present for all collections. */
    IndexSource["SYSTEM"] = "SYSTEM";
    /** Index was created by a user via API or UI. */
    IndexSource["USER"] = "USER";
    /** Index is created automatically by the system based on user queries. */
    IndexSource["AUTO"] = "AUTO";
})(IndexSource || (exports.IndexSource = IndexSource = {}));
var Environment;
(function (Environment) {
    /** Place holder. Never returned by the service. */
    Environment["UNKNOWN_ENVIRONMENT"] = "UNKNOWN_ENVIRONMENT";
    /** Collection [sandbox environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#sandbox-collections). */
    Environment["SANDBOX"] = "SANDBOX";
    /** If the [collection's sandbox environment is enabled](https://support.wix.com/en/article/cms-accessing-and-syncing-your-sandbox-and-live-collections#enabling-sandbox-collections), run the task in the collection's sandbox environment. If not, run the task in the collection's live environment. */
    Environment["SANDBOX_PREFERRED"] = "SANDBOX_PREFERRED";
    /** Collection [live environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#live-collections). */
    Environment["LIVE"] = "LIVE";
})(Environment || (exports.Environment = Environment = {}));
/**
 * Creates an index for a data collection.
 *
 * The index can't be used immediately, as the process of generating the index takes time.
 * You can check whether an index is ready by calling List Indexes.
 *
 * Note that when an index fails to create, the failed index still occupies a slot.
 * To remove the failed index and free up the slot for a new index, call Drop Index.
 * @param dataCollectionId - ID of the data collection for which to generate the index.
 * @param index - Details of the index to be created.
 * @public
 * @requiredField dataCollectionId
 * @requiredField index
 * @requiredField index.fields
 * @requiredField index.fields.path
 * @requiredField index.name
 * @param options - Options for creating an index.
 * @permissionId WIX_DATA.CREATE_INDEX
 * @permissionScope Manage Data Indexes
 * @permissionScopeId SCOPE.DC-DATA.INDEXES-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the index being generated.
 * @fqn com.wixpress.cloud.data.api.index.IndexService.CreateIndex
 */
async function createIndex(dataCollectionId, index) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        dataCollectionId: dataCollectionId,
        index: index,
    });
    const reqOpts = ambassadorWixDataV2Index.createIndex(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.index;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { dataCollectionId: '$[0]', index: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId', 'index']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createIndex = createIndex;
/**
 * Removes an index from a data collection.
 *
 * The process of dropping an index from a collection takes time.
 * You can check whether an index has been dropped by calling List Indexes.
 * @param dataCollectionId - ID of the data collection for which the index to be dropped is defined.
 * @param indexName - Name of the index to drop.
 * @public
 * @requiredField dataCollectionId
 * @requiredField indexName
 * @param options - Options for dropping an index.
 * @permissionId WIX_DATA.DROP_INDEX
 * @permissionScope Manage Data Indexes
 * @permissionScopeId SCOPE.DC-DATA.INDEXES-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.index.IndexService.DropIndex
 */
async function dropIndex(dataCollectionId, indexName) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        dataCollectionId: dataCollectionId,
        indexName: indexName,
    });
    const reqOpts = ambassadorWixDataV2Index.dropIndex(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                dataCollectionId: '$[0]',
                indexName: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId', 'indexName']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.dropIndex = dropIndex;
/**
 * Lists all indexes defined for a data collection.
 *
 * When an index's status is `ACTIVE`, it is ready to use.
 * While it is still being created, its status is `BUILDING`.
 *
 * When an index's status is `DROPPED`, it has been dropped successfully.
 * While it is still in the process of being removed, its status is `DROPPING`.
 * @param dataCollectionId - ID of the data collection for which to list indexes.
 * @public
 * @requiredField dataCollectionId
 * @param options - Options for retrieving a list of indexes.
 * @permissionId WIX_DATA.LIST_INDEXES
 * @permissionScope Manage Data Indexes
 * @permissionScopeId SCOPE.DC-DATA.INDEXES-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.index.IndexService.ListIndexes
 */
async function listIndexes(dataCollectionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        dataCollectionId: dataCollectionId,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV2Index.listIndexes(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                dataCollectionId: '$[0]',
                paging: '$[1].paging',
            },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listIndexes = listIndexes;
/**
 * Lists available indexes limits
 * @param dataCollectionId - Data collection to show available indexes for
 * @internal
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @permissionId WIX_DATA.LIST_INDEXES
 * @permissionScope Manage Data Indexes
 * @permissionScopeId SCOPE.DC-DATA.INDEXES-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.index.IndexService.ListAvailableIndexes
 */
async function listAvailableIndexes(dataCollectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        dataCollectionId: dataCollectionId,
    });
    const reqOpts = ambassadorWixDataV2Index.listAvailableIndexes(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { dataCollectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['dataCollectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listAvailableIndexes = listAvailableIndexes;
//# sourceMappingURL=data-v2-index-indexes.universal.js.map