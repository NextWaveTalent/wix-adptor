import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixDataAutocmsV2BackgroundTask from './data-autocms-v2-background-task-tasks.http.js';
export var Type;
(function (Type) {
    /** Unknown task type. */
    Type["UNKNOWN"] = "UNKNOWN";
    /** Deletes all items that match the specified filter. */
    Type["DELETE_BY_QUERY"] = "DELETE_BY_QUERY";
    /** Copies data from one field to another for all items in the collection. */
    Type["COPY_FIELD_DATA"] = "COPY_FIELD_DATA";
    /** Updates field data for items that match the specified filter. */
    Type["EDIT_FIELD_DATA"] = "EDIT_FIELD_DATA";
    /** In collections that have the Publish plugin, updates the publish status of items that match the specified filter. */
    Type["UPDATE_PUBLISH_STATUS"] = "UPDATE_PUBLISH_STATUS";
})(Type || (Type = {}));
export var Status;
(function (Status) {
    /** Task was created but has not started. */
    Status["NEW"] = "NEW";
    /** Task is currently running. */
    Status["RUNNING"] = "RUNNING";
    /** Task has completed. Partial errors are listed in `failures`. */
    Status["COMPLETED"] = "COMPLETED";
    /**
     * Task has failed. Tasks can fail due to errors or because they were cancelled.
     *
     * Failures are listed in `failures`. Cancelled tasks have a failure `code` value of `CANCELLED`, and no associated failure `data`.
     */
    Status["FAILED"] = "FAILED";
})(Status || (Status = {}));
export var Environment;
(function (Environment) {
    /** Place holder. Never returned by the service. */
    Environment["UNKNOWN_ENVIRONMENT"] = "UNKNOWN_ENVIRONMENT";
    /** Collection [sandbox environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#sandbox-collections). */
    Environment["SANDBOX"] = "SANDBOX";
    /** If the [collection's sandbox environment is enabled](https://support.wix.com/en/article/cms-accessing-and-syncing-your-sandbox-and-live-collections#enabling-sandbox-collections), run the task in the collection's sandbox environment. If not, run the task in the collection's live environment. */
    Environment["SANDBOX_PREFERRED"] = "SANDBOX_PREFERRED";
    /** Collection [live environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#live-collections). */
    Environment["LIVE"] = "LIVE";
})(Environment || (Environment = {}));
export var Operation;
(function (Operation) {
    Operation["UNDEFINED"] = "UNDEFINED";
    /** Update the publish status of all items that match the filter to `PUBLISHED`. */
    Operation["SET_PUBLISHED_STATUS"] = "SET_PUBLISHED_STATUS";
    /** Update the publish status of all items that match the filter to `DRAFT`. */
    Operation["SET_DRAFT_STATUS"] = "SET_DRAFT_STATUS";
    /** Schedule when to update the publish status of all items that match the filter to `PUBLISHED`. */
    Operation["SCHEDULE_PUBLISHED_STATUS"] = "SCHEDULE_PUBLISHED_STATUS";
    /** Schedule when to update the publish status of all items that match the filter to `DRAFT`. */
    Operation["SCHEDULE_DRAFT_STATUS"] = "SCHEDULE_DRAFT_STATUS";
    /** Cancel all scheduled status updates. */
    Operation["CANCEL_SCHEDULING"] = "CANCEL_SCHEDULING";
})(Operation || (Operation = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates and runs a new background task.
 * @param task - Task to create and run.
 * @public
 * @documentationMaturity preview
 * @requiredField task
 * @requiredField task.options
 * @requiredField task.options.copyFieldDataOptions.dataCollectionId
 * @requiredField task.options.copyFieldDataOptions.sourceFieldKey
 * @requiredField task.options.copyFieldDataOptions.targetFieldKey
 * @requiredField task.options.editFieldDataOptions.dataCollectionId
 * @requiredField task.options.editFieldDataOptions.fieldKey
 * @requiredField task.options.updatePublishStatusOptions.dataCollectionId
 * @requiredField task.options.updatePublishStatusOptions.operation
 * @requiredField task.type
 * @permissionId AUTOCMS.TASK_CREATE
 * @permissionId AUTOCMS.TASK_DELETE_BY_QUERY
 * @permissionId AUTOCMS.TASK_UPDATE_DRAFT_PUBLISH
 * @permissionId AUTOCMS.TASK_COPY_FIELD_DATA
 * @permissionId AUTOCMS.TASK_EDIT_FIELD_DATA
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @returns Created task.
 * @fqn wix.cloud.autocms.tasks.v1.TaskService.CreateTask
 */
export async function createTask(task) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ task: task });
    const reqOpts = ambassadorWixDataAutocmsV2BackgroundTask.createTask(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.task;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { task: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['task']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Lists all existing tasks.
 * @public
 * @documentationMaturity preview
 * @permissionId AUTOCMS.TASK_READ
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.cloud.autocms.tasks.v1.TaskService.ListTasks
 */
export async function listTasks(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataAutocmsV2BackgroundTask.listTasks(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { paging: '$[0].paging' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the specified task.
 * @param taskId - Task ID.
 * @public
 * @documentationMaturity preview
 * @requiredField taskId
 * @permissionId AUTOCMS.TASK_READ
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @returns Retrieved task.
 * @fqn wix.cloud.autocms.tasks.v1.TaskService.GetTask
 */
export async function getTask(taskId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ taskId: taskId });
    const reqOpts = ambassadorWixDataAutocmsV2BackgroundTask.getTask(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.task;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taskId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taskId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Cancels an existing task.
 * @param taskId - Task ID.
 * @public
 * @documentationMaturity preview
 * @requiredField taskId
 * @permissionId AUTOCMS.TASK_CANCEL
 * @permissionScope Write Data Items
 * @permissionScopeId SCOPE.DC-DATA.WRITE
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.cloud.autocms.tasks.v1.TaskService.CancelTask
 */
export async function cancelTask(taskId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ taskId: taskId });
    const reqOpts = ambassadorWixDataAutocmsV2BackgroundTask.cancelTask(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taskId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taskId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=data-autocms-v2-background-task-tasks.universal.js.map