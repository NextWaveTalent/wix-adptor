import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixDataV1ExternalDatabaseConnection from './data-v1-external-database-connection-external-database-connections.http.js';
export var CauseOfFailure;
(function (CauseOfFailure) {
    /** No connection failure. */
    CauseOfFailure["NONE"] = "NONE";
    /** General communication failure. */
    CauseOfFailure["COMMUNICATION_FAILURE"] = "COMMUNICATION_FAILURE";
    /** External database host is unreachable. */
    CauseOfFailure["DESTINATION_HOST_UNREACHABLE"] = "DESTINATION_HOST_UNREACHABLE";
    /** Unauthorized to access the external database. */
    CauseOfFailure["UNAUTHORIZED"] = "UNAUTHORIZED";
    /** `endpoint` is not set. */
    CauseOfFailure["DESTINATION_ENDPOINT_NOT_DEFINED"] = "DESTINATION_ENDPOINT_NOT_DEFINED";
})(CauseOfFailure || (CauseOfFailure = {}));
export var CollectionsFound;
(function (CollectionsFound) {
    /** Attempt to connect to the external database failed, so status is unknown. */
    CollectionsFound["UNKNOWN"] = "UNKNOWN";
    /** External database has collections. */
    CollectionsFound["YES"] = "YES";
    /** External database does not have any collections. */
    CollectionsFound["NO"] = "NO";
})(CollectionsFound || (CollectionsFound = {}));
export var FieldType;
(function (FieldType) {
    FieldType["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
    FieldType["TEXT"] = "TEXT";
    FieldType["NUMBER"] = "NUMBER";
    FieldType["DATE"] = "DATE";
    FieldType["DATETIME"] = "DATETIME";
    FieldType["IMAGE"] = "IMAGE";
    FieldType["BOOLEAN"] = "BOOLEAN";
    FieldType["DOCUMENT"] = "DOCUMENT";
    FieldType["URL"] = "URL";
    FieldType["RICH_TEXT"] = "RICH_TEXT";
    FieldType["VIDEO"] = "VIDEO";
    FieldType["ANY"] = "ANY";
    FieldType["ARRAY_STRING"] = "ARRAY_STRING";
    FieldType["ARRAY_DOCUMENT"] = "ARRAY_DOCUMENT";
    FieldType["AUDIO"] = "AUDIO";
    FieldType["TIME"] = "TIME";
    FieldType["LANGUAGE"] = "LANGUAGE";
    FieldType["RICH_CONTENT"] = "RICH_CONTENT";
    FieldType["MEDIA_GALLERY"] = "MEDIA_GALLERY";
    FieldType["ADDRESS"] = "ADDRESS";
    FieldType["PAGE_LINK"] = "PAGE_LINK";
    FieldType["REFERENCE"] = "REFERENCE";
    FieldType["MULTI_REFERENCE"] = "MULTI_REFERENCE";
    FieldType["OBJECT"] = "OBJECT";
    FieldType["ARRAY"] = "ARRAY";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_TIME"] = "LEGACY_TIME";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BOOK"] = "LEGACY_BOOK";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_URL"] = "LEGACY_EXTERNAL_URL";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BROKEN_REFERENCE"] = "LEGACY_BROKEN_REFERENCE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_IMAGE"] = "LEGACY_IMAGE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_COLOR"] = "LEGACY_COLOR";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_VIDEO"] = "LEGACY_EXTERNAL_VIDEO";
})(FieldType || (FieldType = {}));
export var ProtocolVersion;
(function (ProtocolVersion) {
    ProtocolVersion["UNKNOWN_PROTOCOL_VERSION"] = "UNKNOWN_PROTOCOL_VERSION";
    ProtocolVersion["V1"] = "V1";
    ProtocolVersion["V2"] = "V2";
    ProtocolVersion["V3"] = "V3";
})(ProtocolVersion || (ProtocolVersion = {}));
export var ConnectionType;
(function (ConnectionType) {
    /** Unknown connection type. */
    ConnectionType["UNKNOWN_CONNECTION_TYPE"] = "UNKNOWN_CONNECTION_TYPE";
    /** External database connection based on the legacy [external database collection service plugin](https://dev.wix.com/docs/velo/api-reference/wix-data-v2/service-plugins-spis/external-database-collection-legacy/introduction). */
    ConnectionType["STANDALONE"] = "STANDALONE";
    /** External database connection based on the [external database service plugin](https://dev.wix.com/docs/rest/business-solutions/cms/service-plugins/external-database-service-plugin/introduction). */
    ConnectionType["WIX_SERVICE_PLUGIN"] = "WIX_SERVICE_PLUGIN";
})(ConnectionType || (ConnectionType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves the specified external database connection.
 * @param name - Name of the external database connection to retrieve.
 * @public
 * @requiredField name
 * @permissionId WIX_DATA.GET_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the retrieved external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.GetExternalDatabaseConnection
 */
export async function getExternalDatabaseConnection(name) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ name: name });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.getExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { name: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Lists all of the site's external database connections of all adaptor types.
 * @public
 * @permissionId WIX_DATA.LIST_EXTERNAL_DATABASE_CONNECTIONS
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.ListExternalDatabaseConnections
 */
export async function listExternalDatabaseConnections(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.listExternalDatabaseConnections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { paging: '$[0].paging' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a new external database connection.
 *
 * Before you can establish a connection between a site and an external database, you must prepare an external database adaptor.
 * @param externalDatabaseConnection - External database connection details.
 * @param connectionType - Connection type. The connection type specifies the type of adaptor by which the external collection is integrated with the site.
 * @public
 * @requiredField connectionType
 * @requiredField externalDatabaseConnection
 * @requiredField externalDatabaseConnection.name
 * @param options - Options for creating an external database connection.
 * @permissionId WIX_DATA.CREATE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the created external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.CreateExternalDatabaseConnection
 */
export async function createExternalDatabaseConnection(externalDatabaseConnection, connectionType) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        externalDatabaseConnection: externalDatabaseConnection,
        connectionType: connectionType,
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.createExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                externalDatabaseConnection: '$[0]',
                connectionType: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['externalDatabaseConnection', 'connectionType']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates an external database connection.
 *
 * > **Note:** After an external database connection is updated, it only contains the values provided in the request. All previous values are lost.
 * @param name - Name of the external database connection.
 *
 * An external database connection can connect to one or more external data collections or tables. These appear as `connectionName/dataCollectionId`.
 * @public
 * @requiredField externalDatabaseConnection
 * @requiredField name
 * @param options - Options for updating an external database connection.
 * @param externalDatabaseConnection - Updated external database connection details. The existing connection is replaced with this version.
 * @permissionId WIX_DATA.UPDATE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the updated external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.UpdateExternalDatabaseConnection
 */
export async function updateExternalDatabaseConnection(name, externalDatabaseConnection) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        externalDatabaseConnection: { ...externalDatabaseConnection, name: name },
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.updateExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { externalDatabaseConnection: '$[1]' },
            explicitPathsToArguments: { 'externalDatabaseConnection.name': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name', 'externalDatabaseConnection']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes an external database connection.
 *
 * > **Note:** Once an external database connection is deleted, it can't be restored. To reconnect the database, create a new external database connection.
 * @param name - Name of the external database connection to delete.
 * @public
 * @requiredField name
 * @permissionId WIX_DATA.DELETE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.DeleteExternalDatabaseConnection
 */
export async function deleteExternalDatabaseConnection(name) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ name: name });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.deleteExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { name: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=data-v1-external-database-connection-external-database-connections.universal.js.map