"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteExternalDatabaseConnection = exports.updateExternalDatabaseConnection = exports.createExternalDatabaseConnection = exports.listExternalDatabaseConnections = exports.getExternalDatabaseConnection = exports.WebhookIdentityType = exports.ConnectionType = exports.ProtocolVersion = exports.FieldType = exports.CollectionsFound = exports.CauseOfFailure = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixDataV1ExternalDatabaseConnection = __importStar(require("./data-v1-external-database-connection-external-database-connections.http.js"));
var CauseOfFailure;
(function (CauseOfFailure) {
    /** No connection failure. */
    CauseOfFailure["NONE"] = "NONE";
    /** General communication failure. */
    CauseOfFailure["COMMUNICATION_FAILURE"] = "COMMUNICATION_FAILURE";
    /** External database host is unreachable. */
    CauseOfFailure["DESTINATION_HOST_UNREACHABLE"] = "DESTINATION_HOST_UNREACHABLE";
    /** Unauthorized to access the external database. */
    CauseOfFailure["UNAUTHORIZED"] = "UNAUTHORIZED";
    /** `endpoint` is not set. */
    CauseOfFailure["DESTINATION_ENDPOINT_NOT_DEFINED"] = "DESTINATION_ENDPOINT_NOT_DEFINED";
})(CauseOfFailure || (exports.CauseOfFailure = CauseOfFailure = {}));
var CollectionsFound;
(function (CollectionsFound) {
    /** Attempt to connect to the external database failed, so status is unknown. */
    CollectionsFound["UNKNOWN"] = "UNKNOWN";
    /** External database has collections. */
    CollectionsFound["YES"] = "YES";
    /** External database does not have any collections. */
    CollectionsFound["NO"] = "NO";
})(CollectionsFound || (exports.CollectionsFound = CollectionsFound = {}));
var FieldType;
(function (FieldType) {
    FieldType["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
    FieldType["TEXT"] = "TEXT";
    FieldType["NUMBER"] = "NUMBER";
    FieldType["DATE"] = "DATE";
    FieldType["DATETIME"] = "DATETIME";
    FieldType["IMAGE"] = "IMAGE";
    FieldType["BOOLEAN"] = "BOOLEAN";
    FieldType["DOCUMENT"] = "DOCUMENT";
    FieldType["URL"] = "URL";
    FieldType["RICH_TEXT"] = "RICH_TEXT";
    FieldType["VIDEO"] = "VIDEO";
    FieldType["ANY"] = "ANY";
    FieldType["ARRAY_STRING"] = "ARRAY_STRING";
    FieldType["ARRAY_DOCUMENT"] = "ARRAY_DOCUMENT";
    FieldType["AUDIO"] = "AUDIO";
    FieldType["TIME"] = "TIME";
    FieldType["LANGUAGE"] = "LANGUAGE";
    FieldType["RICH_CONTENT"] = "RICH_CONTENT";
    FieldType["MEDIA_GALLERY"] = "MEDIA_GALLERY";
    FieldType["ADDRESS"] = "ADDRESS";
    FieldType["PAGE_LINK"] = "PAGE_LINK";
    FieldType["REFERENCE"] = "REFERENCE";
    FieldType["MULTI_REFERENCE"] = "MULTI_REFERENCE";
    FieldType["OBJECT"] = "OBJECT";
    FieldType["ARRAY"] = "ARRAY";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_TIME"] = "LEGACY_TIME";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BOOK"] = "LEGACY_BOOK";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_URL"] = "LEGACY_EXTERNAL_URL";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BROKEN_REFERENCE"] = "LEGACY_BROKEN_REFERENCE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_IMAGE"] = "LEGACY_IMAGE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_COLOR"] = "LEGACY_COLOR";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_VIDEO"] = "LEGACY_EXTERNAL_VIDEO";
})(FieldType || (exports.FieldType = FieldType = {}));
var ProtocolVersion;
(function (ProtocolVersion) {
    ProtocolVersion["UNKNOWN_PROTOCOL_VERSION"] = "UNKNOWN_PROTOCOL_VERSION";
    ProtocolVersion["V1"] = "V1";
    ProtocolVersion["V2"] = "V2";
    ProtocolVersion["V3"] = "V3";
})(ProtocolVersion || (exports.ProtocolVersion = ProtocolVersion = {}));
var ConnectionType;
(function (ConnectionType) {
    /** Unknown connection type. */
    ConnectionType["UNKNOWN_CONNECTION_TYPE"] = "UNKNOWN_CONNECTION_TYPE";
    /** External database connection based on the legacy [external database collection service plugin](https://dev.wix.com/docs/velo/api-reference/wix-data-v2/service-plugins-spis/external-database-collection-legacy/introduction). */
    ConnectionType["STANDALONE"] = "STANDALONE";
    /** External database connection based on the [external database service plugin](https://dev.wix.com/docs/rest/business-solutions/cms/service-plugins/external-database-service-plugin/introduction). */
    ConnectionType["WIX_SERVICE_PLUGIN"] = "WIX_SERVICE_PLUGIN";
})(ConnectionType || (exports.ConnectionType = ConnectionType = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves the specified external database connection.
 * @param name - Name of the external database connection to retrieve.
 * @public
 * @requiredField name
 * @permissionId WIX_DATA.GET_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the retrieved external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.GetExternalDatabaseConnection
 */
async function getExternalDatabaseConnection(name) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ name: name });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.getExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { name: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getExternalDatabaseConnection = getExternalDatabaseConnection;
/**
 * Lists all of the site's external database connections of all adaptor types.
 * @public
 * @permissionId WIX_DATA.LIST_EXTERNAL_DATABASE_CONNECTIONS
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.ListExternalDatabaseConnections
 */
async function listExternalDatabaseConnections(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.listExternalDatabaseConnections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { paging: '$[0].paging' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listExternalDatabaseConnections = listExternalDatabaseConnections;
/**
 * Creates a new external database connection.
 *
 * Before you can establish a connection between a site and an external database, you must prepare an external database adaptor.
 * @param externalDatabaseConnection - External database connection details.
 * @param connectionType - Connection type. The connection type specifies the type of adaptor by which the external collection is integrated with the site.
 * @public
 * @requiredField connectionType
 * @requiredField externalDatabaseConnection
 * @requiredField externalDatabaseConnection.name
 * @param options - Options for creating an external database connection.
 * @permissionId WIX_DATA.CREATE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the created external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.CreateExternalDatabaseConnection
 */
async function createExternalDatabaseConnection(externalDatabaseConnection, connectionType) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        externalDatabaseConnection: externalDatabaseConnection,
        connectionType: connectionType,
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.createExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                externalDatabaseConnection: '$[0]',
                connectionType: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['externalDatabaseConnection', 'connectionType']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createExternalDatabaseConnection = createExternalDatabaseConnection;
/**
 * Updates an external database connection.
 *
 * > **Note:** After an external database connection is updated, it only contains the values provided in the request. All previous values are lost.
 * @param name - Name of the external database connection.
 *
 * An external database connection can connect to one or more external data collections or tables. These appear as `connectionName/dataCollectionId`.
 * @public
 * @requiredField externalDatabaseConnection
 * @requiredField name
 * @param options - Options for updating an external database connection.
 * @param externalDatabaseConnection - Updated external database connection details. The existing connection is replaced with this version.
 * @permissionId WIX_DATA.UPDATE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @returns Details of the updated external database connection.
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.UpdateExternalDatabaseConnection
 */
async function updateExternalDatabaseConnection(name, externalDatabaseConnection) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        externalDatabaseConnection: { ...externalDatabaseConnection, name: name },
    });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.updateExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.externalDatabaseConnection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { externalDatabaseConnection: '$[1]' },
            explicitPathsToArguments: { 'externalDatabaseConnection.name': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name', 'externalDatabaseConnection']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateExternalDatabaseConnection = updateExternalDatabaseConnection;
/**
 * Deletes an external database connection.
 *
 * > **Note:** Once an external database connection is deleted, it can't be restored. To reconnect the database, create a new external database connection.
 * @param name - Name of the external database connection to delete.
 * @public
 * @requiredField name
 * @permissionId WIX_DATA.DELETE_EXTERNAL_DATABASE_CONNECTION
 * @permissionScope Manage External Database Connections
 * @permissionScopeId SCOPE.DC-DATA.EXTERNAL-DATABASE-CONNECTIONS-MANAGE
 * @permissionScope Manage All Data Resources
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-ALL
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.externaldatabase.ExternalDatabaseConnectionService.DeleteExternalDatabaseConnection
 */
async function deleteExternalDatabaseConnection(name) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ name: name });
    const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.deleteExternalDatabaseConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { name: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['name']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteExternalDatabaseConnection = deleteExternalDatabaseConnection;
//# sourceMappingURL=data-v1-external-database-connection-external-database-connections.universal.js.map