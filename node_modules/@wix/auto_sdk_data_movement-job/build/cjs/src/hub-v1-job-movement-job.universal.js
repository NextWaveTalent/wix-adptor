"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listMovementLogs = exports.terminateJob = exports.listJobs = exports.getJob = exports.createFileUploadUrl = exports.submitJob = exports.SortOrder = exports.WebhookIdentityType = exports.Units = exports.FieldType = exports.WritePolicy = exports.FileFormat = exports.WixDataEnvironment = exports.JobStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixHubV1Job = __importStar(require("./hub-v1-job-movement-job.http.js"));
// @ts-ignore
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var JobStatus;
(function (JobStatus) {
    /** Job was submitted but has not yet started. */
    JobStatus["UNINITIALIZED"] = "UNINITIALIZED";
    /** Job is initializing. */
    JobStatus["INITIALIZING"] = "INITIALIZING";
    /** Job is in progress. */
    JobStatus["IN_PROGRESS"] = "IN_PROGRESS";
    /** Job has successfully completed. */
    JobStatus["COMPLETED"] = "COMPLETED";
    /** Job has failed. */
    JobStatus["FAILED"] = "FAILED";
    /** Job has completed but was partially successful due to a destination limitation. See `PartiallySuccessfulOptions` for additional details. */
    JobStatus["PARTIALLY_SUCCESSFUL"] = "PARTIALLY_SUCCESSFUL";
})(JobStatus || (exports.JobStatus = JobStatus = {}));
var WixDataEnvironment;
(function (WixDataEnvironment) {
    /** Collection's [live environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#sandbox-collections). */
    WixDataEnvironment["LIVE"] = "LIVE";
    /** Collection's [sandbox environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#live-collections). */
    WixDataEnvironment["SANDBOX"] = "SANDBOX";
})(WixDataEnvironment || (exports.WixDataEnvironment = WixDataEnvironment = {}));
var FileFormat;
(function (FileFormat) {
    /** Unknown format. */
    FileFormat["UNKNOWN"] = "UNKNOWN";
    /** CSV format. */
    FileFormat["CSV"] = "CSV";
    /** JSONL format. */
    FileFormat["JSONL"] = "JSONL";
})(FileFormat || (exports.FileFormat = FileFormat = {}));
var WritePolicy;
(function (WritePolicy) {
    /** When an item with the same ID exists in the collection, overwrite it. */
    WritePolicy["OVERWRITE"] = "OVERWRITE";
    /** When an item with the same ID exists in the collection, skip it. */
    WritePolicy["SKIP_EXISTING"] = "SKIP_EXISTING";
    /** Clear the destination collection before moving data. When the job completes, the collection contains only the moved data. */
    WritePolicy["TRUNCATE_BEFORE"] = "TRUNCATE_BEFORE";
})(WritePolicy || (exports.WritePolicy = WritePolicy = {}));
var FieldType;
(function (FieldType) {
    /** Any data type. */
    FieldType["ANY"] = "ANY";
    /** String. */
    FieldType["STRING"] = "STRING";
    /** Number. */
    FieldType["NUMBER"] = "NUMBER";
    /** Boolean. */
    FieldType["BOOLEAN"] = "BOOLEAN";
    /** Date string in ISO 8601 date format: `YYYY-MM-DD`. */
    FieldType["DATE"] = "DATE";
    /** [Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) (SDK) or an object in the following format: `"someFieldKey": { "$date": "YYYY-MM-DDTHH:mm:ss.sssZ"}`. */
    FieldType["DATETIME"] = "DATETIME";
    /** Binary file. */
    FieldType["BINARY"] = "BINARY";
    /** object. */
    FieldType["OBJECT"] = "OBJECT";
    /** Array. */
    FieldType["ARRAY"] = "ARRAY";
    /** Web URL. */
    FieldType["URL"] = "URL";
    FieldType["WIX_MEDIA_URL"] = "WIX_MEDIA_URL";
    FieldType["WIX_MEDIA_IMAGE_URL"] = "WIX_MEDIA_IMAGE_URL";
    FieldType["WIX_MEDIA_VIDEO_URL"] = "WIX_MEDIA_VIDEO_URL";
    FieldType["WIX_MEDIA_DOCUMENT_URL"] = "WIX_MEDIA_DOCUMENT_URL";
    FieldType["IMAGE_URL"] = "IMAGE_URL";
    FieldType["VIDEO_URL"] = "VIDEO_URL";
})(FieldType || (exports.FieldType = FieldType = {}));
var Units;
(function (Units) {
    /** Default value. This value is unused. */
    Units["UNKNOWN_UNITS"] = "UNKNOWN_UNITS";
    /** Unit of bytes. */
    Units["BYTES"] = "BYTES";
    /** Unit of items. */
    Units["ITEMS"] = "ITEMS";
})(Units || (exports.Units = Units = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
/**
 * Submit a data movement job.
 *
 * > **Note**: By default, the job is submitted for the current site.
 * @param source - Source to move data from.
 * @param destination - Destination to move data to.
 * @public
 * @documentationMaturity preview
 * @requiredField destination
 * @requiredField destination.destination
 * @requiredField destination.destination.file.format
 * @requiredField destination.destination.localization.languages
 * @requiredField destination.destination.wixDataCollection.collectionId
 * @requiredField source
 * @requiredField source.source
 * @requiredField source.source.file.fileId
 * @requiredField source.source.localization.languages
 * @requiredField source.source.wixDataCollection.collectionId
 * @permissionId WIX_DATA.DATA_JOB_SUBMIT
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.SubmitJob
 */
async function submitJob(source, destination, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        source: source,
        destination: destination,
        transformations: options?.transformations,
        name: options?.name,
        sourceSiteId: options?.sourceSiteId,
        destinationSiteId: options?.destinationSiteId,
    });
    const reqOpts = ambassadorWixHubV1Job.submitJob(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                source: '$[0]',
                destination: '$[1]',
                transformations: '$[2].transformations',
                name: '$[2].name',
                sourceSiteId: '$[2].sourceSiteId',
                destinationSiteId: '$[2].destinationSiteId',
            },
            singleArgumentUnchanged: false,
        }, ['source', 'destination', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.submitJob = submitJob;
/**
 * Creates a URL to upload a data source file. The URL is valid for 15 minutes.
 *
 * Call this method when submitting a job to import data from a file to a site.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_DATA.TMP_FILE_UPLOAD_CREATE
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.CreateFileUploadUrl
 */
async function createFileUploadUrl(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        fileName: options?.fileName,
    });
    const reqOpts = ambassadorWixHubV1Job.createFileUploadUrl(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { fileName: '$[0].fileName' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createFileUploadUrl = createFileUploadUrl;
/**
 * Retrieves the specified data movement job.
 *
 * > **Note**: You can only retrieve jobs submitted for the current site.
 * @param jobId - Job ID.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_GET
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @returns Details of the retrieved job.
 * @fqn wix.hub.v1.DataMovementService.GetJob
 */
async function getJob(jobId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ jobId: jobId });
    const reqOpts = ambassadorWixHubV1Job.getJob(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.job;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { jobId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['jobId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getJob = getJob;
/**
 * Lists data movement jobs for the current site.
 * @public
 * @documentationMaturity preview
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @permissionId WIX_DATA.DATA_JOB_LIST
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.ListJobs
 */
function listJobs(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixHubV1Job.listJobs({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, []));
            return {
                items: transformedData?.jobs,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.listJobs = listJobs;
/**
 * Terminates the specified job.
 * @param jobId - ID of the job to terminate.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_TERMINATE
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.TerminateJob
 */
async function terminateJob(jobId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ jobId: jobId });
    const reqOpts = ambassadorWixHubV1Job.terminateJob(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { jobId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['jobId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.terminateJob = terminateJob;
/**
 * Lists logs for the specified job.
 *
 * Logs are generated by the destination for each item that failed to move. Some destinations also generate logs for items that moved successfully.
 * @param jobId - ID of the job for which to list logs.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_LIST_LOGS
 * @permissionScope Read Data Items
 * @permissionScopeId SCOPE.DC-DATA.READ
 * @permissionScope Data Mover Manage Jobs
 * @permissionScopeId SCOPE.DC-DATA.MANAGE_MOVEMENT_JOBS
 * @permissionScope Manage Data Items
 * @permissionScopeId SCOPE.DC-DATA.MANAGE-DATA
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.ListMovementLogs
 */
async function listMovementLogs(jobId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        jobId: jobId,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixHubV1Job.listMovementLogs(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { jobId: '$[0]', paging: '$[1].paging' },
            singleArgumentUnchanged: false,
        }, ['jobId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listMovementLogs = listMovementLogs;
//# sourceMappingURL=hub-v1-job-movement-job.universal.js.map