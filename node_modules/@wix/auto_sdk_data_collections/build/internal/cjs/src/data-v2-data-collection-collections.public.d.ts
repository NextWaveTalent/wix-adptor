import { HttpClient } from '@wix/sdk-types';
import { CreateDataCollectionFieldOptions, CreateDataCollectionFieldResponse, DataCollection, DeleteDataCollectionFieldOptions, DeleteDataCollectionFieldResponse, GetDataCollectionOptions, ListDataCollectionsOptions, ListDataCollectionsResponse, RestoreDataCollectionResponse, UpdateDataCollectionFieldOptions, UpdateDataCollectionFieldResponse } from './data-v2-data-collection-collections.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createDataCollection(httpClient: HttpClient): CreateDataCollectionSignature;
interface CreateDataCollectionSignature {
    /**
     * Creates a new data collection.
     *
     * The request body must include an ID, details for at least 1 field, and a permissions object. If any of these are missing, the collection isn't created.
     * @param - Collection details.
     * @param - Options for creating a data collection.
     * @returns Details of collection created.
     */
    (collection: DataCollection): Promise<DataCollection>;
}
export declare function getDataCollection(httpClient: HttpClient): GetDataCollectionSignature;
interface GetDataCollectionSignature {
    /**
     * Retrieves a data collection by ID.
     * @param - ID of the collection to retrieve.
     * @param - Options for retrieving a data collection.
     * @returns Details of the collection requested.
     */
    (dataCollectionId: string, options?: GetDataCollectionOptions | undefined): Promise<DataCollection>;
}
export declare function listDataCollections(httpClient: HttpClient): ListDataCollectionsSignature;
interface ListDataCollectionsSignature {
    /**
     * Retrieves a list of all data collections associated with the site or project.
     *
     * By default, the list is ordered by ID in ascending order.
     * @param - Options for retrieving a list of data collections.
     */
    (options?: ListDataCollectionsOptions | undefined): Promise<ListDataCollectionsResponse>;
}
export declare function updateDataCollection(httpClient: HttpClient): UpdateDataCollectionSignature;
interface UpdateDataCollectionSignature {
    /**
     * Updates a data collection.
     *
     * A collection ID, revision number, permissions, and at least 1 field must be provided within the `collection` body parameter.
     * If a collection with that ID exists, and if its current `revision` number matches the one provided, it is updated.
     * Otherwise, the request fails.
     *
     * When a collection is updated, its `updatedDate` property is changed to the current date and its `revision` property is incremented.
     *
     * > **Note:**
     * > After a collection is updated, it only contains the properties included in the Update Data Collection request. If the existing collection has properties with values and those properties
     * > aren't included in the updated collection details, their values are lost.
     * @param - Updated collection details. The existing collection is replaced with this version.
     * @param - Options for updating a data collection.
     * @returns Updated collection details.
     */
    (collection: DataCollection): Promise<DataCollection>;
}
export declare function deleteDataCollection(httpClient: HttpClient): DeleteDataCollectionSignature;
interface DeleteDataCollectionSignature {
    /**
     * Deletes a data collection.
     *
     * > **Note:**
     * > Once a collection is deleted, it can only be restored for limited amount of time.
     * @param - ID of the collection to delete.
     */
    (dataCollectionId: string): Promise<void>;
}
/** @internal */
export declare function restoreDataCollection(httpClient: HttpClient): RestoreDataCollectionSignature;
interface RestoreDataCollectionSignature {
    /**
     * Restores recently deleted collection.
     *
     * Fails with `WDE0025` if collection was deleted too long ago or has never existed.
     * @param - Data Collection ID to restore
     */
    (dataCollectionId: string): Promise<RestoreDataCollectionResponse>;
}
/** @internal */
export declare function createDataCollectionField(httpClient: HttpClient): CreateDataCollectionFieldSignature;
interface CreateDataCollectionFieldSignature {
    /**
     * Adds new field to data collection schema
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: CreateDataCollectionFieldOptions): Promise<CreateDataCollectionFieldResponse>;
}
/** @internal */
export declare function updateDataCollectionField(httpClient: HttpClient): UpdateDataCollectionFieldSignature;
interface UpdateDataCollectionFieldSignature {
    /**
     * Updates data collection field
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: UpdateDataCollectionFieldOptions): Promise<UpdateDataCollectionFieldResponse>;
}
/** @internal */
export declare function deleteDataCollectionField(httpClient: HttpClient): DeleteDataCollectionFieldSignature;
interface DeleteDataCollectionFieldSignature {
    /**
     * Deletes data collection field
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: DeleteDataCollectionFieldOptions): Promise<DeleteDataCollectionFieldResponse>;
}
export { AccessLevel, ActionEvent, AllowedDataPermissions, ArraySizeRange, BulkGetDataCollectionsPageBySnapshotsRequest, BulkGetDataCollectionsPageBySnapshotsResponse, BulkGetDataCollectionsRequest, BulkGetDataCollectionsResponse, Calculator, CalculatorPatternOneOf, CmsOptions, CollectionCapabilities, CollectionOperation, CollectionType, CreateDataCollectionFieldOptions, CreateDataCollectionFieldRequest, CreateDataCollectionFieldResponse, CreateDataCollectionRequest, CreateDataCollectionResponse, CreateDataCollectionsSnapshotRequest, CreateDataCollectionsSnapshotResponse, CreateMigratedCollectionsSnapshotRequest, CreateMigratedCollectionsSnapshotResponse, DataCollection, DataCollectionChangedEvent, DataCollectionClonedEvent, DataCollectionEvictedEvent, DataOperation, DataPermissions, DeleteDataCollectionFieldOptions, DeleteDataCollectionFieldRequest, DeleteDataCollectionFieldResponse, DeleteDataCollectionRequest, DeleteDataCollectionResponse, DeleteDataCollectionsSnapshotRequest, DeleteDataCollectionsSnapshotResponse, Destination, Direction, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, Failure, Field, FieldCapabilities, FieldPlugin, FieldPluginOptionsOneOf, FieldPluginType, FieldRangeValidationsOneOf, FieldUpdate, FieldsPattern, Format, GetDataCollectionOptions, GetDataCollectionRequest, GetDataCollectionResponse, IdentificationData, IdentificationDataIdOneOf, Index, IndexField, IndexLimits, IndexQuotaLimits, IndexSource, IndexStatus, ListDataCollectionsOptions, ListDataCollectionsRequest, ListDataCollectionsResponse, MessageEnvelope, MultiReference, MultilingualOptions, NumberRange, ObjectField, Order, PageLink, PageLinkPluginOptions, Paging, PagingMetadataV2, PagingMode, Permissions, Plugin, PluginCmsOptions, PluginOptionsOneOf, PluginType, PluginUpdate, PublishPluginOptions, QueryOperator, Reference, RestorationCollection, RestoreDataCollectionRequest, RestoreDataCollectionResponse, RestoreDataCollectionsFromSnapshotRequest, RestoreDataCollectionsFromSnapshotResponse, RestoreInfo, Role, Segment, SingleItemPluginOptions, SiteSort, SnapshotCollection, Sort, SortOrder, Sorting, Status, StringLengthRange, Type, TypeMetadata, TypeMetadataMetadataOneOf, UpdateDataCollectionFieldOptions, UpdateDataCollectionFieldRequest, UpdateDataCollectionFieldResponse, UpdateDataCollectionRequest, UpdateDataCollectionResponse, UpdateDataPermissionsRequest, UpdateDataPermissionsResponse, UrlizedOnlyPattern, UrlizedPluginOptions, WebhookIdentityType, _Array, _Object, } from './data-v2-data-collection-collections.universal.js';
